--CTEs
WITH CTE_Employee as 
(select FirstName, LastName, Gender, Salary, 
count(Gender) over (Partition by Gender) totalgender
, AVG(Salary) over(Partition by Gender) AvgSalary
from [SQL Tutorial]..[EmployeeDemographics] Demo
Join [SQL Tutorial]..[EmployeeSalary] Demo1
on Demo.EmployeeID=Demo1.EmployeeID
WHERE Salary>'50000'
)
Select *
From  CTE_Employee
.......................................................................
-- Temp Tables
CREATE TABLE #temp_Employee (
EmployeeID int,
JobTitle varchar(50),
Salary int
)

Select *
FROM #temp_Employee

INSERT INTO #temp_Employee VALUES(
1100,'HR',45000)

Select *
FROM #temp_Employee
--THIS IS GOOD USE
INSERT INTO #temp_Employee 
SELECT *
FROM [SQL Tutorial]..EmployeeSalary

Select *
FROM #temp_Employee
....
Drop table if exists #temp_employee2 --this line remove if table exits

Create table #temp_employee2 (
JobTitle varchar(100),
EmployeesPerJob int ,
AvgAge int,
AvgSalary int
)


Insert into #temp_employee2
SELECT JobTitle, Count(JobTitle), Avg(Age), AVG(salary)
FROM [SQL Tutorial]..EmployeeDemographics emp
JOIN [SQL Tutorial]..EmployeeSalary sal
	ON emp.EmployeeID = sal.EmployeeID
group by JobTitle

SELECT *
FROM #temp_employee2

/*
Today's Topic: String Functions - TRIM, LTRIM, RTRIM, Replace, Substring, Upper, Lower
*/
--Drop Table EmployeeErrors;


CREATE TABLE EmployeeErrors (
EmployeeID varchar(50)
,FirstName varchar(50)
,LastName varchar(50)
)

Insert into EmployeeErrors Values 
('1001  ', 'Jimbo', 'Halbert')
,('  1002', 'Pamela', 'Beasely')
,('1005', 'TOby', 'Flenderson - Fired')

Select *
From EmployeeErrors

--using TRIM, LTRIM, RTRIM

select EmployeeID, TRIM(EmployeeID) AS IDTRIM
from EmployeeErrors

select EmployeeID, LTRIM(EmployeeID) AS IDTRIM
from EmployeeErrors

select EmployeeID, RTRIM(EmployeeID) AS IDTRIM
from EmployeeErrors


--USING Replace
select *
from EmployeeErrors
select LastName, REPLACE(LastName, '- Fired','') as LASTFIXED
from EmployeeErrors

--USING Substring
select SUBSTRING(Firstname,1,3)
from EmployeeErrors

Select Substring(err.FirstName,1,3), Substring(dem.FirstName,1,3), Substring(err.LastName,1,3), Substring(dem.LastName,1,3)
FROM EmployeeErrors err
JOIN [SQL Tutorial]..EmployeeDemographics dem
	on Substring(err.FirstName,1,3) = Substring(dem.FirstName,1,3)
	and Substring(err.LastName,1,3) = Substring(dem.LastName,1,3)


Select firstname, LOWER(firstname)
from EmployeeErrors
Select firstname, UPPER(firstname)
from EmployeeErrors


/*
Today's Topic: Stored Procedures
*/

CREATE PROCEDURE TEST
AS
SELECT *
FROM [SQL Tutorial]..EmployeeDemographics

EXEC test  --run stroeproceture command


------------
CREATE PROCEDURE Temp_Employee
AS
DROP TABLE IF EXISTS #temp_employee
Create table #temp_employee (
JobTitle varchar(100),
EmployeesPerJob int ,
AvgAge int,
AvgSalary int
)
Insert into #temp_employee
SELECT JobTitle, Count(JobTitle), Avg(Age), AVG(salary)
FROM SQLTutorial..EmployeeDemographics emp
JOIN SQLTutorial..EmployeeSalary sal
	ON emp.EmployeeID = sal.EmployeeID
group by JobTitle
Select * 
From #temp_employee
GO;


----------------------------
CREATE PROCEDURE Temp_Employee2 
@JobTitle nvarchar(100)
AS
DROP TABLE IF EXISTS #temp_employee3
Create table #temp_employee3 (
JobTitle varchar(100),
EmployeesPerJob int ,
AvgAge int,
AvgSalary int
)
Insert into #temp_employee3
SELECT JobTitle, Count(JobTitle), Avg(Age), AVG(salary)
FROM SQLTutorial..EmployeeDemographics emp
JOIN SQLTutorial..EmployeeSalary sal
	ON emp.EmployeeID = sal.EmployeeID
where JobTitle = @JobTitle --- make sure to change this in this script from original above
group by JobTitle

Select * 
From #temp_employee3
GO;

--------------------------
exec Temp_Employee2 @jobtitle = 'Salesman'
exec Temp_Employee2 @jobtitle = 'Accountant'

-------------------------

/*

Today's Topic: Subqueries (in the Select, From, and Where Statement)

*/

Select EmployeeID, JobTitle, Salary
From EmployeeSalary

-- Subquery in Select

Select EmployeeID, Salary, (Select AVG(Salary) From EmployeeSalary) as AllAvgSalary
From EmployeeSalary

-- How to do it with Partition By
Select EmployeeID, Salary, AVG(Salary) over () as AllAvgSalary
From EmployeeSalary

-- Why Group By doesn't work
Select EmployeeID, Salary, AVG(Salary) as AllAvgSalary
From EmployeeSalary
Group By EmployeeID, Salary
order by EmployeeID

-- Subquery in From
Select a.EmployeeID, AllAvgSalary
From 
	(Select EmployeeID, Salary, AVG(Salary) over () as AllAvgSalary
	 From EmployeeSalary) a
Order by a.EmployeeID

-- Subquery in Where


Select EmployeeID, JobTitle, Salary
From EmployeeSalary
where EmployeeID in (
	Select EmployeeID 
	From EmployeeDemographics
	where Age > 30)

